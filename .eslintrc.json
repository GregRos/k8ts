{
  "root": true,
  // Let's not use @typescript-eslint because it's a bit too strict.
  // eslint:recommended is good though.
  "extends": ["eslint:recommended", "prettier"],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "jest"],
  "parserOptions": {
    "project": "**/tsconfig.json",
    "ecmaVersion": 2022,
    "sourceType": "commonjs"
  },
  "rules": {
    //! UNSORTED RULES
    // Place any additional rules either here at the top, or in the appropriate section below.
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/consistent-type-exports": "error",

    //! Disable formatting rules since we're using prettier.
    "quotes": "off",
    "no-undef": "off",
    "no-case-declarations": "off",
    "no-trailing-spaces": "off",
    //! END

    //! These are from https://github.com/google/gts/blob/main/.eslintrc.json
    "prefer-const": "error",
    "eol-last": "error",
    "prefer-arrow-callback": "error",
    "no-restricted-properties": [
      "error",
      {
        "object": "describe",
        "property": "only"
      },
      {
        "object": "it",
        "property": "only"
      }
    ],
    //! END

    //! These are from https://github.com/google/eslint-config-google/blob/master/index.js
    "guard-for-in": "error",
    "no-caller": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-invalid-this": "error",
    "no-multi-spaces": "error",
    "no-multi-str": "error",
    "no-new-wrappers": "error",
    "prefer-promise-reject-errors": "error",
    //! END

    //! Extra rules
    // Force === except for the special case ==null.
    "eqeqeq": ["error", "always", { "null": "ignore" }],
    "array-callback-return": "warn",
    "no-self-compare": "warn",
    "dot-notation": "error",
    "max-depth": "warn",
    "max-nested-callbacks": ["warn", 5],

    "max-params": ["warn", 4],

    "no-iterator": "error",

    "no-new": "warn",

    "no-new-object": "error",

    "no-proto": "error",

    "no-sequences": "warn",

    "no-unneeded-ternary": "error",

    "no-useless-computed-key": "error",

    "no-useless-rename": "error",

    "prefer-numeric-literals": "error",

    "symbol-description": "error",
    //! END

    //! These are part of @typescript-eslint/recommended
    // Some have JS versions that need to be disabled.
    "default-param-last": "off",
    "@typescript-eslint/default-param-last": "error",

    "no-redeclare": "off",
    "no-dupe-class-members": "off",
    "@typescript-eslint/no-dupe-class-members": "error",

    "no-duplicate-imports": "off",

    "no-loss-of-precision": "off",
    "@typescript-eslint/no-loss-of-precision": "error",

    "no-throw-literal": "off",
    "@typescript-eslint/no-throw-literal": "error",

    "no-unused-expressions": "off",
    "@typescript-eslint/no-unused-expressions": "error",

    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": ["warn", { "args": "none", "vars": "local" }],

    "no-useless-constructor": "off",
    "@typescript-eslint/no-useless-constructor": "error",

    "@typescript-eslint/adjacent-overload-signatures": "error",

    "@typescript-eslint/await-thenable": "error",

    "@typescript-eslint/ban-ts-comment": "error",

    "@typescript-eslint/no-extra-non-null-assertion": "error",

    "@typescript-eslint/no-floating-promises": "warn",

    "@typescript-eslint/no-for-in-array": "warn",

    "@typescript-eslint/no-misused-new": "warn",

    "@typescript-eslint/no-misused-promises": "warn",

    "@typescript-eslint/no-namespace": "off",

    "@typescript-eslint/no-non-null-asserted-optional-chain": "warn",

    "@typescript-eslint/prefer-namespace-keyword": "error",

    "@typescript-eslint/triple-slash-reference": "warn",

    //! These aren't part of @typescript-eslint/recommended
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "array"
      }
    ],

    "@typescript-eslint/consistent-type-assertions": [
      "error",
      {
        "assertionStyle": "as"
      }
    ],

    "@typescript-eslint/no-confusing-non-null-assertion": "error",

    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",

    "@typescript-eslint/no-unnecessary-qualifier": "error",
    "@typescript-eslint/prefer-for-of": "warn",
    "@typescript-eslint/prefer-optional-chain": "warn",
    "@typescript-eslint/promise-function-async": "warn"
  }
}
